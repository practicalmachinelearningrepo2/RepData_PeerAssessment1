library(datasets)
load(iris)
data(iris)
?tapply
head(iris)
tapply(iris,iris$Species,mean)
tapply(iris[,1;4],iris$Species,mean)
tapply(iris[,1:4],iris$Species,mean)
tapply(iris[,1:4],Species,mean)
tapply(iris[,1:4],as.factor(iris$Species),mean)
apply(iris[,1:4],mean)
sapply(iris[,1:4],mean)
?split
split(iris,iris$Species)
sapply(split(iris,iris$Species),mean)
sapply(split(iris,iris$Species)[,1:4],mean)
sapply(split(iris,iris$Species),mean)
irisSplit<-split(iris,iris$Species)
?tapply
tapply(iris,irisSplit)
sapply(iris,irisSplit)
sapply(irisSplit)
sapply(irisSplit,mean)
sapply(irisSplit,mean,rm.remove=TRUE)
sapply(irisSplit,mean,rm.remove=FALSE)
sapply(irisSplit[,1:4],mean,rm.remove=TRUE)
str(irisSplit)
?mapply
mapply(mean,irisSplit)
mapply(mean,irisSplit[,1:4])
mapply(mean,as.matrix(irisSplit[,1:4])
)
mapply(mean,irisSplit)
as.matrix(irisSplit)
sapply(irisSplit$setosa,mean)
sapply(irisSplit$setosa[1:4,],mean)
sapply(irisSplit$setosa[,1:4],mean)
sapply(irisSplit$virginica[,1:4],mean)
sapply(irisSplit$versicolor[,1:4],mean)
meanValues[1,]<- sapply(irisSplit$setosa[,1:4],mean)
meanValues<- sapply(irisSplit$setosa[,1:4],mean)
meanValues[2,]<- sapply(irisSplit$versicolor[,1:4],mean)
meanValues<matrix(3,4)
meanValues<-matrix(3,4)
meanValues[1,]<- sapply(irisSplit$setosa[,1:4],mean)
sapply(irisSplit$setosa[,1:4],mean)
class(sapply(irisSplit$setosa[,1:4],mean))
?matrix
meanValues<-matrix(nrow=3,ncol=4)
meanValues[1,]<- sapply(irisSplit$setosa[,1:4],mean)
meanValues[2,]<- sapply(irisSplit$versicolor[,1:4],mean)
meanValues[3,]<- sapply(irisSplit$virginica[,1:4],mean)
meanvalues
meanValues
set.seed(1)
rpois(5, 2)
?rbinom
rep(0:1, each = 5)
activity <- read.csv("C:/kaggle/reproducible data analysis/homework 1/RepData_PeerAssessment1/activity.csv")
activity[,2]<-as.Date(activity[,2])
activityClean<-activity[!is.na(activity$steps),]
stepsByDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$date), FUN=sum)
hist(stepsByDays$x,53)
View(stepsByDays)
View(stepsByDays)
hist(stepsByDays$x)
meanStepsPerDay<-mean(stepsByDays$x)
medianStepsPerDay<-median(stepsByDays$x)
hist(stepsByDays$x,20)
View(activity)
View(activity)
stepsByIntervalsInDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$date,activityClean$interval), FUN=sum)
View(stepsByIntervalsInDays)
View(stepsByIntervalsInDays)
stepsByIntervalsInDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$interval), FUN=average)
stepsByIntervalsInDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$interval), FUN=avg)
stepsByIntervalsInDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$interval), FUN=mean)
View(stepsByIntervalsInDays)
plot(stepsByIntervalsInDays,type="l")
stepsByIntervalsInDays[stepsByIntervalsInDays$x==max(stepsByIntervalsInDays$x),]
View(activity)
View(activity)
summary(activity)
a<-summary(activity)
a<-list(summary(activity))
a<-summary(activity)
a[0]
a[0,]
a[1,]
a[2,]
a[6,]
a[7,]
a[7,1]
a<-summary(activity)
summary(activity)
activity$steps
is.na(activity$steps)
count(is.na(activity$steps))
nrow(is.na(activity$steps))
ncol(is.na(activity$steps))
activity[,is.na(activity$steps)]
activity[is.na(activity$steps),]
nrow(activity[is.na(activity$steps),])
summary(activity)
nrow(activity[is.na(activity$steps),])
numberOfNAValues<-nrow(activity[is.na(activity$steps),])
View(activity)
View(stepsByIntervalsInDays)
colnames(stepsByIntervalsInDays)
colnames(stepsByIntervalsInDays)[2]
colnames(stepsByIntervalsInDays)[2]<-interval
colnames(stepsByIntervalsInDays)[2]<-"interval"
colnames(stepsByIntervalsInDays)
bb<-merge(activity,stepsByIntervalsInDays)
bb<-merge(activity,stepsByIntervalsInDays,by="interval")
View(bb)
View(activity)
View(stepsByIntervalsInDays)
bb<-merge(stepsByIntervalsInDays,activity,by="interval")
View(bb)
View(activity)
View(stepsByIntervalsInDays)
stepsByDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$date), FUN=sum)
hist(stepsByDays$x)
meanStepsPerDay<-mean(stepsByDays$x)
medianStepsPerDay<-median(stepsByDays$x)
stepsByIntervalsInDays<-aggregate(as.numeric(activityClean$steps), list(activityClean$interval), FUN=mean)
plot(stepsByIntervalsInDays,type="l")
stepsByIntervalsInDays[stepsByIntervalsInDays$x==max(stepsByIntervalsInDays$x),]
numberOfNAValues<-nrow(activity[is.na(activity$steps),])
colnames(stepsByIntervalsInDays)[1]<-"interval"
bb<-merge(activity,stepsByIntervalsInDays,by="interval")
withMeanIntervalValues<-merge(activity,stepsByIntervalsInDays,by="interval")
View(withMeanIntervalValues)
withMeanIntervalValues[is.na(withMeanIntervalValues),]
withMeanIntervalValues[is.na(withMeanIntervalValues$steps),]
withMeanIntervalValues[is.na(withMeanIntervalValues$steps),]<-withMeanIntervalValues[is.na(withMeanIntervalValues$steps),]$x
withMeanIntervalValues[is.na(withMeanIntervalValues$steps),]<-withMeanIntervalValues[is.na(withMeanIntervalValues$step),]$x
withMeanIntervalValues[is.na(withMeanIntervalValues$steps),]$step<-withMeanIntervalValues[is.na(withMeanIntervalValues$step),]$x
withMeanIntervalValues$steps[is.na(withMeanIntervalValues$steps)] <- withMeanIntervalValues$x[is.na(withMeanIntervalValues$steps)]
View(withMeanIntervalValues)
withMeanIntervalValues<-merge(activity,stepsByIntervalsInDays,by="interval")
withMeanIntervalValues$steps[is.na(withMeanIntervalValues$steps)]
withMeanIntervalValues$x[is.na(withMeanIntervalValues$steps)]
withMeanIntervalValues$steps[is.na(withMeanIntervalValues$steps)] <- withMeanIntervalValues$x[is.na(withMeanIntervalValues$steps)]
numberOfNAValues<-nrow(activity[is.na(activity$steps),])
summary(withMeanIntervalValues)
View(activity)
withMeanIntervalValues<-withMeanIntervalValues[,1:3]
View(withMeanIntervalValues)
stepsByDaysImputed<-aggregate(as.numeric(withMeanIntervalValues$steps), list(withMeanIntervalValues$date), FUN=sum)
hist(stepsByDaysImputed$x)
meanStepsPerDayImputed<-mean(stepsByDaysImputed$x)
medianStepsPerDayImputed<-median(stepsByDaysImputed$x)
?weekdays
?weekday
is.weekend('a'')
9
)
is.weekend('a')
weekdays('a')
weekdays('2012-11-30')
weekdays()
weekdays(as.Date('2012-11-30')
)
withMeanIntervalValues$isWeekday<-weekdays(withMeanIntervalValues$date)
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday=='subota']<-as.factor('weekend')
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday=='nedjelja']<-as.factor('weekend')
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday<-as.factor(weekdays(withMeanIntervalValues$date))
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday=='subota']<-as.factor('weekend')
withMeanIntervalValues$isWeekday<-weekdays(withMeanIntervalValues$date)
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday=='subota' || withMeanIntervalValues$isWeekday=='nedjelja']<-'weekend'
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday=='subota' | withMeanIntervalValues$isWeekday=='nedjelja']<-'weekend'
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday[withMeanIntervalValues$isWeekday!='weekend']<-'weekday'
View(withMeanIntervalValues)
withMeanIntervalValues$isWeekday<-as.factor(withMeanIntervalValues$isWeekday)
View(withMeanIntervalValues)
stepsByIntervalsInDaysImputed<-aggregate(as.numeric(withMeanIntervalValues$steps), list(withMeanIntervalValues$interval), FUN=mean)
plot(stepsByIntervalsInDaysImputed,type="l")
plot(steps ~ isWeekday, data = stepsByIntervalsInDaysImputed,type="l")
stepsByIntervalsInDaysImputed<-aggregate(as.numeric(withMeanIntervalValues$steps), list(withMeanIntervalValues$interval,withMeanIntervalValues$isWeekday), FUN=mean)
plot(stepsByIntervalsInDaysImputed,type="l")
plot(stepsByIntervalsInDaysImputed)
View(stepsByIntervalsInDaysImputed)
library(lattice)
xyplot(x~Group.1 | Group.2,data=stepsByIntervalsInDaysImputed)
xyplot(x~Group.1 | Group.2,data=stepsByIntervalsInDaysImputed,type='l')
?xyplot
xyplot(x~Group.1 | Group.2,data=stepsByIntervalsInDaysImputed,type='l',xlab='bla',ylab='blah2')
xyplot(x~Group.1 | Group.2,data=stepsByIntervalsInDaysImputed,type='l',xlab='Interval',ylab='Number of steps')
xyplot(x~Group.1 | Group.2,data=stepsByIntervalsInDaysImputed,type='l',xlab='Interval',ylab='Number of steps',layout=c(1,2))
The following contains an analysis of the data provided for the assignment 1, answering all questions.
Reproducible Research - Assignment 1
stepsByIntervalsInDays[stepsByIntervalsInDays$x==max(stepsByIntervalsInDays$x),]
stepsByIntervalsInDays[stepsByIntervalsInDays$x==max(stepsByIntervalsInDays$x),1]
?knit2html
library(knitr)
?knit2html
kint2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
setwd("C:/kaggle/reproducible data analysis/homework 1/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
